http://rushikdm.blogspot.com/2016/12/e-eggs-f-floors-puzzle.html

满二叉树


15个节点，满二叉树

                1     
          /            \
         2              3
      /    \         /     \
     4      5       6       7
   /  \   /   \    /  \    /  \
  8    9  10   11 12  13  14  15

上面表格中，我们认为width == height，且都是[0,3]
width  == 0意思是：没向左走
height == 0意思是：就一个点

Full BST：width == height

给定一个BST，有f个nodes，且，width<=e
则：该BST就总是可以找到楼层，但，此时，BST并不知道 最小步数的BST。什么是最小步骤呢？

最小步骤的方案是什么呢？

找到BST，该BST满足：
a. width <= e，且
b. height最小

如果给定节点数目是f，且构成Full BST，且width<=e，则，此时的height就是最优解


给定f个节点，无法构成Full BST，但，如果满足条件：
e >= h（鸡蛋数目很多，比高度多）h是 补全节点后所构成的Full BST的高度
补充的节点数目就是 F(h)-f

e >= h（鸡蛋数目很多，比高度多），此时，最少步数依然是：h
给很多很多蛋，并没有啥用处
比如：log2(100)==6.64
给2蛋，100层楼，补充成 Full BST后，127层，h==7
给定e >= 7个蛋，楼层是127，则，最小步数，永远是 7
7、8、9....再多的蛋，127层时，也是需要7次

但，e<7时，最小步数 >h

因此，当 e<h时：
丢弃掉 >e个蛋的 那些节点。

所谓丢弃掉，就是：把这些节点插入到 可用列的 leaf 节点中去

当然，只插入需要的就好了
h==7时，Full BST==127，我们给的是100层，因此，实际插入的应该是：

实际需要插入 = 无效的列中的全部节点的个数 - (127-100)
因为，毕竟，我们事实上，有27个节点根本用不着的


待插入的<=0，则，结束了。


达不到的node，摘下来；放置到 左边的节点下


2个蛋，12层楼

h==4，即共15个节点

Full BST 高度共4层，宽度也是4层

需要摘下来 0&1列 的全部节点，将其接到：
2&3列中的叶子节点上

每一个列，有多少个 节点 呢？
h!/(c! (h-c)!)
0列：1 （ 4!/(0! (4 – 0)!) ）
1列：4 （ 4!/(1! (4 – 1)!) ）
2列：6 （ 4!/(2! (4 – 2)!) ）
3列：4 （ 4!/(3! (4 – 3)!) ）


总共有 1+4 = 5个需要移动，

我们实际有12个节点，但，我们Full BST是15个，即：多了3个。这几个就无需移动了
最后，实际要移动（5-3==2）


每一个列，有多少 叶子节点 呢？
(h-1)!/( c! (h-1-c)! )
0列：1 （ 3!/(0! (4–1-0)!) ）
1列：3 （ 3!/(1! (4–1-1)!) ）
2列：3 （ 3!/(2! (4–1-2)!) ）
3列：1 （ 3!/(3! (4–1-3)!) ）

待插入的有2个
2&3列 上，有多少个 叶子节点呢？ 3 + 1，共4个

这两个叶子节点，随便放喽















































